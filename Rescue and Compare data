*&---------------------------------------------------------------------*
*& Report ZCOMPAREDATA
*&---------------------------------------------------------------------*
*&  j_1btxdef, j_1btxip1, j_1btxip2, j_1btxip3, j_1btxic1, j_1btxic2,
*&  j_1btxic3, j_1btxci1, j_1btxis1, j_1btxis3, j_1btxst1, j_1btxst2,
*&  j_1btxst3, j_1btxsdc, j_1btregx, j_1btxiss, j_1btxpis, j_1btxcof,
*&  j_1btxwith.
*&---------------------------------------------------------------------*
REPORT zcomparedata.

TABLES dd02d.

DATA: reference       TYPE REF TO data,
      gt_sort         TYPE abap_sortorder_tab,
      gt_fieldcatalog TYPE lvc_t_fcat,
      gt_exclude      TYPE ui_functions,

      go_splitter     TYPE REF TO cl_gui_splitter_container,
      go_container    TYPE REF TO cl_gui_container,
      go_alv          TYPE REF TO cl_gui_alv_grid,

      gs_variant      TYPE disvariant,
      gs_layout       TYPE lvc_s_layo.

FIELD-SYMBOLS: <itab>      TYPE STANDARD TABLE,
               <itab_l>    TYPE STANDARD TABLE,
               <itab_r>    TYPE STANDARD TABLE,
               <wa_itab_l> TYPE any,
               <wa_itab_r> TYPE any.

PARAMETERS ptabname LIKE dd02d-dbtabname OBLIGATORY.

START-OF-SELECTION.
  CALL SCREEN 0100.

*&---------------------------------------------------------------------*
*& Module STATUS_0100 OUTPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
MODULE status_0100 OUTPUT.

  SET PF-STATUS '0100'.
  SET TITLEBAR '0100'.

  IF go_alv IS NOT BOUND.
    TYPES: BEGIN OF ty_select,
             line TYPE char75,
           END OF ty_select.

    DATA: lv_rfcdest     TYPE rfcdest,
          lv_fnameprim   TYPE lvc_fname,
          lv_fdpos       TYPE i,

          lt_where       TYPE TABLE OF ty_select,
          lt_dbtabdata_l TYPE zdbtabdata,
          lt_dbtabdata_r TYPE zdbtabdata,

          lw_value       TYPE zsbc_range_type.

    CALL FUNCTION 'ZRESCUEDATA'
      EXPORTING
        dbtabname = ptabname
      CHANGING
        dbtabdata = lt_dbtabdata_l.

    CALL FUNCTION 'ZFMBC_GET_PARAMETER'
      EXPORTING
        i_process_id = 'COMPAREDATA'
        i_field_name = 'RFC'
      IMPORTING
        e_value      = lw_value.

    IF lw_value-low IS NOT INITIAL.
      lv_rfcdest = lw_value-low.

      CALL FUNCTION 'ZRESCUEDATA'
        DESTINATION lv_rfcdest
        EXPORTING
          dbtabname = ptabname
        CHANGING
          dbtabdata = lt_dbtabdata_r.

      SELECT SINGLE rfcoptions FROM rfcdes
       WHERE rfcdest EQ @lv_rfcdest
        INTO @DATA(lv_rfcoptions).

      IF lv_rfcoptions CS 'I='.
        lv_fdpos = sy-fdpos + 2.
        lv_rfcoptions = lv_rfcoptions+lv_fdpos(3).
      ENDIF.
    ENDIF.

    gs_variant-report     = sy-repid.
    gs_variant-username   = sy-uname.

    gs_layout-zebra      = abap_true.
    gs_layout-cwidth_opt = abap_true.
    gs_layout-sel_mode   = 'A'.

    APPEND: cl_gui_alv_grid=>mc_fc_filter            TO gt_exclude,
            cl_gui_alv_grid=>mc_fc_sum               TO gt_exclude,
            cl_gui_alv_grid=>mc_mb_sum               TO gt_exclude,
            cl_gui_alv_grid=>mc_mb_variant           TO gt_exclude,
            cl_gui_alv_grid=>mc_fc_help              TO gt_exclude,
            cl_gui_alv_grid=>mc_fc_loc_undo          TO gt_exclude,
            cl_gui_alv_grid=>mc_fc_graph             TO gt_exclude,
            cl_gui_alv_grid=>mc_fc_print             TO gt_exclude,
            cl_gui_alv_grid=>mc_fc_print_prev        TO gt_exclude,
            cl_gui_alv_grid=>mc_fc_info              TO gt_exclude,
            cl_gui_alv_grid=>mc_fc_detail            TO gt_exclude.

    PERFORM create_fc.

    CREATE OBJECT go_splitter
      EXPORTING
        parent  = cl_gui_container=>default_screen
        rows    = 1
        columns = 1.

    CALL METHOD go_splitter->get_container
      EXPORTING
        row       = 1
        column    = 1
      RECEIVING
        container = go_container.

    CREATE OBJECT go_alv
      EXPORTING
        i_parent          = go_container
      EXCEPTIONS
        error_cntl_create = 1
        error_cntl_init   = 2
        error_cntl_link   = 3
        error_dp_create   = 4
        OTHERS            = 5.

    DO 3 TIMES.
      CLEAR reference.

      CALL METHOD cl_alv_table_create=>create_dynamic_table
        EXPORTING
          it_fieldcatalog = gt_fieldcatalog
        IMPORTING
          ep_table        = reference.

      CASE sy-index.
        WHEN 1. ASSIGN reference->* TO <itab>.
        WHEN 2. ASSIGN reference->* TO <itab_l>.
        WHEN 3. ASSIGN reference->* TO <itab_r>.
      ENDCASE.
    ENDDO.

    "Local
    IF lines( lt_dbtabdata_l ) GT 0.
      READ TABLE lt_dbtabdata_l INTO DATA(lw_dbtabdata) INDEX 1.
      lv_fnameprim = lw_dbtabdata-fieldname.

      LOOP AT lt_dbtabdata_l INTO lw_dbtabdata.
        IF lv_fnameprim EQ lw_dbtabdata-fieldname.
          APPEND INITIAL LINE TO <itab_l> ASSIGNING <wa_itab_l>.
        ENDIF.

        ASSIGN COMPONENT lw_dbtabdata-fieldname OF STRUCTURE <wa_itab_l> TO FIELD-SYMBOL(<fieldvalue>).
        IF <fieldvalue> IS ASSIGNED.
          MOVE lw_dbtabdata-fieldvalu TO <fieldvalue>.
        ENDIF.
      ENDLOOP.
    ENDIF.

    "Remote
    IF lines( lt_dbtabdata_r ) GT 0.
      READ TABLE lt_dbtabdata_r INTO lw_dbtabdata INDEX 1.
      lv_fnameprim = lw_dbtabdata-fieldname.

      LOOP AT lt_dbtabdata_r INTO lw_dbtabdata.
        IF lv_fnameprim EQ lw_dbtabdata-fieldname.
          APPEND INITIAL LINE TO <itab_r> ASSIGNING <wa_itab_r>.
        ENDIF.

        ASSIGN COMPONENT lw_dbtabdata-fieldname OF STRUCTURE <wa_itab_r> TO <fieldvalue>.
        IF <fieldvalue> IS ASSIGNED.
          MOVE lw_dbtabdata-fieldvalu TO <fieldvalue>.
        ENDIF.
      ENDLOOP.
    ENDIF.

    LOOP AT gt_fieldcatalog INTO DATA(lw_fieldcatalog).
      CHECK lw_fieldcatalog-fieldname NE 'SYSID'.

      APPEND INITIAL LINE TO gt_sort ASSIGNING FIELD-SYMBOL(<fs_sort>).
      <fs_sort>-name = lw_fieldcatalog-fieldname.
    ENDLOOP.

    APPEND INITIAL LINE TO gt_sort ASSIGNING <fs_sort>.
    <fs_sort>-name = 'SYSID'.

    SORT: <itab_l> BY (gt_sort),
          <itab_r> BY (gt_sort).

    "Procura dados do Local no Remoto
    LOOP AT <itab_l> ASSIGNING <wa_itab_l>.
      PERFORM monta_where USING <wa_itab_l>.

      LOOP AT <itab_r> ASSIGNING <wa_itab_r> WHERE (lt_where).
      ENDLOOP.

      IF sy-subrc NE 0.
        ASSIGN COMPONENT 'SYSID' OF STRUCTURE <wa_itab_l> TO <fieldvalue>.
        IF <fieldvalue> IS ASSIGNED.
          MOVE sy-sysid TO <fieldvalue>.
        ENDIF.

        APPEND <wa_itab_l> TO <itab>.
      ENDIF.
    ENDLOOP.

    "Procura dados do Remoto no Local
    LOOP AT <itab_r> ASSIGNING <wa_itab_r>.
      PERFORM monta_where USING <wa_itab_r>.

      LOOP AT <itab_r> ASSIGNING <wa_itab_l> WHERE (lt_where).
      ENDLOOP.

      IF sy-subrc NE 0.
        ASSIGN COMPONENT 'SYSID' OF STRUCTURE <wa_itab_r> TO <fieldvalue>.
        IF <fieldvalue> IS ASSIGNED.
          MOVE lv_rfcoptions(3) TO <fieldvalue>.
        ENDIF.

        APPEND <wa_itab_r> TO <itab>.
      ENDIF.
    ENDLOOP.

    SORT: <itab> BY (gt_sort).

    CALL METHOD go_alv->set_table_for_first_display
      EXPORTING
        is_variant           = gs_variant
        is_layout            = gs_layout
        it_toolbar_excluding = gt_exclude
      CHANGING
        it_outtab            = <itab>
        it_fieldcatalog      = gt_fieldcatalog.

    CALL METHOD go_alv->set_toolbar_interactive.

    CALL METHOD cl_gui_control=>set_focus
      EXPORTING
        control = go_alv.
  ELSE.

    PERFORM refresh.
  ENDIF.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0100 INPUT.

  CASE sy-ucomm.
    WHEN 'BACK' OR 'LEAV' OR 'CANC'.
      SET SCREEN 0.
      LEAVE LIST-PROCESSING.

  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*& Form create_fc
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM create_fc.

  DATA: lt_fieldcatalog     TYPE TABLE OF dfies,

        lv_structure_name   TYPE dd02l-tabname,
        lv_internal_tabname TYPE dd02l-tabname.

  REFRESH gt_fieldcatalog.

  lv_structure_name  = lv_internal_tabname = ptabname.
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name       = lv_structure_name
      i_internal_tabname     = lv_internal_tabname
    CHANGING
      ct_fieldcat            = gt_fieldcatalog
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.

  CALL FUNCTION 'DDIF_NAMETAB_GET'
    EXPORTING
      tabname   = lv_structure_name
    TABLES
      dfies_tab = lt_fieldcatalog
    EXCEPTIONS
      not_found = 1
      OTHERS    = 2.

  LOOP AT gt_fieldcatalog ASSIGNING FIELD-SYMBOL(<fs_fieldcatalog>).
    DATA(lv_idx) = sy-tabix.

    ADD 1 TO <fs_fieldcatalog>-col_pos.
    <fs_fieldcatalog>-reptext   = <fs_fieldcatalog>-scrtext_l.
    <fs_fieldcatalog>-txt_field = <fs_fieldcatalog>-scrtext_l(30).

    IF <fs_fieldcatalog>-reptext IS INITIAL AND
       lines( lt_fieldcatalog ) GT 0.
      READ TABLE lt_fieldcatalog INTO DATA(lw_fieldcatalog_) WITH KEY tabname   = ptabname
                                                                      fieldname = <fs_fieldcatalog>-fieldname.
      IF sy-subrc EQ 0.
        SELECT SINGLE domname FROM dd04l
          INTO <fs_fieldcatalog>-domname
         WHERE rollname EQ lw_fieldcatalog_-rollname
           AND as4local EQ 'A'
           AND as4vers EQ '0000'.
      ENDIF.

      PERFORM domain_text CHANGING <fs_fieldcatalog>.

      <fs_fieldcatalog>-scrtext_l =
      <fs_fieldcatalog>-scrtext_m =
      <fs_fieldcatalog>-scrtext_s = <fs_fieldcatalog>-reptext.
    ENDIF.

    <fs_fieldcatalog>-outputlen = strlen( <fs_fieldcatalog>-reptext ).

    CLEAR: <fs_fieldcatalog>-tabname,
           <fs_fieldcatalog>-domname,
           <fs_fieldcatalog>-ref_field,
           <fs_fieldcatalog>-ref_table.
  ENDLOOP.

  APPEND INITIAL LINE TO gt_fieldcatalog ASSIGNING <fs_fieldcatalog>.
  <fs_fieldcatalog>-col_pos	  = 1.
  <fs_fieldcatalog>-fieldname	= 'SYSID'.
  <fs_fieldcatalog>-outputlen = 8.
  <fs_fieldcatalog>-datatype  = 'CHAR'.
  <fs_fieldcatalog>-inttype	  = 'C'.
  <fs_fieldcatalog>-intlen    = '000008'.
  <fs_fieldcatalog>-txt_field = <fs_fieldcatalog>-reptext =
  <fs_fieldcatalog>-scrtext_l = <fs_fieldcatalog>-scrtext_m =
  <fs_fieldcatalog>-scrtext_s = 'SYSID'.

  SORT gt_fieldcatalog BY row_pos col_pos.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form DOMAIN_TEXT
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM domain_text  CHANGING p_fcat    TYPE lvc_s_fcat.

  DATA lt_dd04t TYPE TABLE OF dd04t.

  IF p_fcat-reptext   IS INITIAL AND
     p_fcat-txt_field IS INITIAL AND
     p_fcat-domname   IS NOT INITIAL.

    CALL FUNCTION 'DD_DTEL_GET'
      EXPORTING
        roll_name     = p_fcat-domname
      TABLES
        dd04t_tab_a   = lt_dd04t
      EXCEPTIONS
        illegal_value = 1
        OTHERS        = 2.

  ENDIF.

  READ TABLE lt_dd04t INTO DATA(ls_dd04t) WITH KEY ddlanguage = 'PT'
                                                   as4local   = 'A'
                                                   as4vers    = '0000'.
  IF sy-subrc EQ 0.
    PERFORM domain_textt    USING ls_dd04t
                         CHANGING p_fcat.
  ELSE.
    READ TABLE lt_dd04t INTO ls_dd04t WITH KEY ddlanguage = 'EN'
                                               as4local   = 'A'
                                               as4vers    = '0000'.
    IF sy-subrc EQ 0.
      PERFORM domain_textt    USING ls_dd04t
                           CHANGING p_fcat.
    ENDIF.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form DOMAIN_TEXTT
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM domain_textt  USING    p_dd04t TYPE dd04t
                   CHANGING p_fcat  TYPE lvc_s_fcat.

  IF p_fcat-reptext IS INITIAL.
    IF     p_dd04t-reptext   IS NOT INITIAL.
      MOVE p_dd04t-reptext   TO p_fcat-reptext.

    ELSEIF p_dd04t-scrtext_s IS NOT INITIAL.
      MOVE p_dd04t-scrtext_s TO p_fcat-reptext.

    ELSEIF p_dd04t-scrtext_m IS NOT INITIAL.
      MOVE p_dd04t-scrtext_m TO p_fcat-reptext.

    ELSEIF p_dd04t-scrtext_l IS NOT INITIAL.
      MOVE p_dd04t-scrtext_l TO p_fcat-reptext.

    ELSEIF p_dd04t-ddtext    IS NOT INITIAL.
      MOVE p_dd04t-ddtext    TO p_fcat-reptext.

    ENDIF.
  ENDIF.

  IF p_fcat-txt_field IS INITIAL.
    IF     p_dd04t-reptext   IS NOT INITIAL.
      MOVE p_dd04t-reptext   TO p_fcat-txt_field.

    ELSEIF p_dd04t-scrtext_s IS NOT INITIAL.
      MOVE p_dd04t-scrtext_s TO p_fcat-txt_field.

    ELSEIF p_dd04t-scrtext_m IS NOT INITIAL.
      MOVE p_dd04t-scrtext_m TO p_fcat-txt_field.

    ELSEIF p_dd04t-scrtext_l IS NOT INITIAL.
      MOVE p_dd04t-scrtext_l TO p_fcat-txt_field.

    ELSEIF p_dd04t-ddtext    IS NOT INITIAL.
      MOVE p_dd04t-ddtext    TO p_fcat-txt_field.

    ENDIF.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form refresh
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM refresh .

  go_alv->refresh_table_display(
        EXPORTING
          i_soft_refresh = abap_true
      ).

ENDFORM.
*&---------------------------------------------------------------------*
*& Form monta_where
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM monta_where USING p_itab TYPE any.

  REFRESH lt_where[].
  LOOP AT gt_fieldcatalog INTO DATA(lw_fieldcatalog).
    APPEND INITIAL LINE TO lt_where ASSIGNING FIELD-SYMBOL(<fs_where>).

    ASSIGN COMPONENT lw_fieldcatalog-fieldname OF STRUCTURE p_itab "<fs_where>
                                               TO FIELD-SYMBOL(<fieldvalue>).
    IF <fieldvalue> IS ASSIGNED.
      IF lines( lt_where ) EQ 1.
        <fs_where>-line = |{ lw_fieldcatalog-fieldname } = '{ <fieldvalue> }'|.
      ELSE.
        <fs_where>-line = |AND { lw_fieldcatalog-fieldname } = '{ <fieldvalue> }'|.
      ENDIF.
    ENDIF.
  ENDLOOP.

ENDFORM.

*"----------------------------------------------------------------------
*"----------------------------------------------------------------------
*"----------------------------------------------------------------------

FUNCTION zrescuedata.
*"----------------------------------------------------------------------
*"*"Interface local:
*"  IMPORTING
*"     VALUE(DBTABNAME) TYPE  TABNAME16
*"  CHANGING
*"     VALUE(DBTABDATA) TYPE  ZDBTABDATA
*"----------------------------------------------------------------------
  DATA: lv_tabname  TYPE dd02l-tabname,
        lt_fieldcat TYPE lvc_t_fcat,
        d_reference TYPE REF TO data,
        out_line    TYPE REF TO data.

  FIELD-SYMBOLS: <itab>    TYPE STANDARD TABLE,
                 <wa_itab> TYPE any.

  MOVE dbtabname TO lv_tabname.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name       = lv_tabname
    CHANGING
      ct_fieldcat            = lt_fieldcat
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.

  CALL METHOD cl_alv_table_create=>create_dynamic_table
    EXPORTING
      it_fieldcatalog = lt_fieldcat
    IMPORTING
      ep_table        = d_reference.

  ASSIGN d_reference->* TO <itab>.

  CREATE DATA out_line LIKE LINE OF <itab>.
  ASSIGN out_line->* TO <wa_itab>.

  SELECT * FROM (dbtabname)
    INTO TABLE <itab>.

  LOOP AT <itab> ASSIGNING <wa_itab>.
    LOOP AT lt_fieldcat INTO DATA(lw_fieldcat).
      APPEND INITIAL LINE TO dbtabdata ASSIGNING FIELD-SYMBOL(<dbtabdata>).

      ASSIGN COMPONENT lw_fieldcat-fieldname OF STRUCTURE <wa_itab> TO FIELD-SYMBOL(<fs>).
      <dbtabdata>-fieldkey  = lw_fieldcat-key.
      <dbtabdata>-fieldname = lw_fieldcat-fieldname.

      MOVE <fs> TO <dbtabdata>-fieldvalu.
      CONDENSE <dbtabdata>-fieldvalu NO-GAPS.
    ENDLOOP.
  ENDLOOP.

ENDFUNCTION.
